from Tkinter import *
from datetime import datetime
import os

class LibScanner:

    Rperiod = [
        480,521,
        520,566,
        565,615,
        614,661,
        660,707,
        706,753,
        752,799,
        798,845,
        844,890,
        889,935,
        934,1440,
        934,1440,
        0,480
    ]

    Hperiod = [
        480,520,
        519,565,
        564,609,
        608,669,
        668,714,
        713,758,
        757,802,
        801,846,
        845,890,
        889,935,
        934,1440,
        934,1440,
        0,480
    ]

    def __init__(self, window, text, mainData, regular):
        self.window = window
        self.text = text
        self.mainData = mainData
        self.regular = regular
        self.osis = 0
        self.count = 0
        self.prevPeriod = 0
        self.cur_per = []
        self.window.bind('<KeyPress>', self.keypress)
        self.aside = window.after(1000, self.tick)
        self.minute = int(datetime.now().strftime('%M')) + 1

    @staticmethod
    def create():
        print 'Loading program...'
        window = Tk()
        window.geometry('400x400')
        window.title('ScanIn')
        mainData = Label(window)
        mainData.pack(fill=BOTH, expand=1)
        mainData.config(font=('times',20,'bold'), bg='yellow')
        text = Entry(window, bd=5)
        text.place(x=150,y=20)
        text.configure(border=1)
        regular = IntVar()
        regular.set(1)
        schedule = Checkbutton(window, text = "Regular", variable = regular,
                               onvalue = 1, offvalue = 0, height=5,
                               width = 55, bg='orange')
        schedule.pack()
        if not os.path.isfile('data.pyc') and not os.path.isfile('data.py'):
            LibScanner.create_data()
        with open('log.txt','a') as file:
            file.write(datetime.now().strftime('%m/%d/%Y') + '\n')
            file.close()
        mainData.config(text='Ready!')
        return LibScanner(window, text, mainData, regular)

    @staticmethod
    def create_data():
        from openpyxl import load_workbook
        wb = load_workbook('KLsched.xlsx')
        ws = wb['content']
        result = [[] for i in xrange(12)]
        #print result
        for row in ws.rows[1:ws.max_row]:
            count = 1
            for cell in row[5:15]:
                if str(cell.value)[:1] in 'Z' or cell.value==None:
                    result[count].append(str(row[1].value))
                count += 1
        string = '\ndef getPeriod(p):\n    return result[p]'
        with open('data.py','a') as file:
            file.write('result = ' + str(result) + string)
            file.close()

    def getTime(self):
        time = datetime.now()
        hour = time.strftime('%H')
        minute = time.strftime('%M')
        Tminute = 60 * int(hour) + int(minute)
        tmp = LibScanner.Rperiod
        #print self.regular.get()
        if not self.regular.get():
            tmp = LibScanner.Hperiod
        for i in xrange(len(tmp) - 1):
            if Tminute >= tmp[i] and Tminute < tmp[i + 1]:
                #print (i+2)/2
                return (i+2)/2
    
    def match(self):
        if self.osis in self.cur_per:
            return self.osis + ': Granted'
        return self.osis + ': Denied'
    
    def keypress(self, event):
        if event.char.isspace():
            self.osis = self.text.get()
            self.text.delete(0, len(self.text.get()))
            string = self.match()
            bg = 'red'
            if 'Granted' in string:
                self.count += 1
                bg = 'green'
            if 'Gym' in string:
                bg = 'yellow'
            self.mainData.config(text='Entered: ' + str(self.count) + '\n' + string, bg=bg)
            time = datetime.now().strftime('%H:%M:%S')
            with open('log.txt','a') as file:
                file.write(time + '\t' + string + '\n')
                file.close()
                
    def tick(self):
        from data import getPeriod
        period = self.getTime()
        #print period
        if self.prevPeriod != period:
            self.prevPeriod = period
            self.count = 0
            self.cur_per = getPeriod(period)
            self.mainData.config(text='Entered: ' + str(self.count) + '\n', bg='blue')
        self.aside = self.window.after(1000, self.tick)
        
##    def tick(self):
##        from data import getPeriod
##        if self.prevPeriod != 4:
##            period = 11
##        time = datetime.now()
##        if int(time.strftime('%M')) > self.minute:
##            self.prevPeriod = 6
##            self.count = 0
##            self.cur_per = getPeriod(6)
##            self.mainData.config(text='Entered: ' + str(self.count) + '\n', bg='yellow')
##        elif self.prevPeriod != period:
##            self.prevPeriod = 4
##            period = 4
##            self.cur_per = getPeriod(4)
##            self.mainData.config(text='Entered: ' + str(self.count) + '\n', bg='yellow')
##        self.prevPeriod = period
##        self.aside = self.window.after(1000, self.tick)
        
    def run(self):
        self.window.mainloop()

if __name__ == '__main__':
    obj = LibScanner.create()
    obj.run()
